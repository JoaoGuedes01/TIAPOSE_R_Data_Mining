library(xlsx)
q()
install.packages(c("boot", "class", "foreign", "KernSmooth", "MASS", "nnet", "spatial"))
q()
library(rminer)
library(Rcpp)
remove.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
unlink("~/.R/Makevars")
unlink("~/.Renviron")
install.packages(c('Rcpp', 'RcppArmadillo'))
Rcpp::sourceCpp('/Users/pcortez/R/rminer/helloworld.cpp')
q()
library(rminer)
help(package=rminer)
2^-6
2^-1
2^-2
2^5
length(seq(-6,1))
length(seq(-2,5))
library(gramEvol)
?GrammaticalEvolution
q()
shiny::runApp('Dropbox/BookR/1V2/demoApp')
source('~/Dropbox/BookR/1V2/functions.R')
shiny::runApp('Dropbox/BookR/1V2/demoApp')
library(rminer)
model=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe",
"randomForest","xgboost","cubist","lm","mr","mars","pcr","plsr","cppls","rvm")
math=read.table("bank_additional_cln.csv",sep=";",header=TRUE)
setwd("~/AULAS/MIEGSI/SINO/2020/projeto/RegressaÌƒoG25.rar Folder/")
library(rminer)
model=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe",
"randomForest","xgboost","cubist","lm","mr","mars","pcr","plsr","cppls","rvm")
math=read.table("bank_additional_cln.csv",sep=";",header=TRUE)
inputs=c(1,2,3,4,10)
education=which(names(math)=="education")
cat("output class:",class(math[,education]),"\n")
rmath=math[,c(inputs,education)] # for easy use
y=rmath$education # target
ho=holdout(rmath$education,2/3,seed=123) # 2/3 for training and 1/3 for testing
Y=rmath[ho$ts,ncol(rmath)]
summary(Y)
summary(ho
)
for(i in 1:length(model))
{
cat("i:",i,"model:",model[i],"\n")
search=list(search=mparheuristic(model[i])) # rminer default values
M=fit(education~.,data=rmath[ho$tr,],model=model[i],search=search,fdebug=TRUE)
P=predict(M,rmath[ho$ts,])
cat("predicted MAE:",round(mmetric(Y,P,metric="MAE"),1),"\n")
}
class(M)
M@object
?fit
summary(data=rmath[ho$tr,])
summary(rmath[ho$tr,])
summary(rmath)
names(math)
summary(math)
names(math)
names(math)[inputs]
education=which(names(math)=="education")
rmath=math[,c(inputs,education)]
summary(rmath)
rmath=math[,c(inputs)] # for easy use
ho=holdout(rmath$education,2/3,seed=123) # 2/3 for training and 1/3 for testing
Y=rmath[ho$ts,ncol(rmath)]
i=2
search=list(search=mparheuristic(model[i])) # rminer default values
M=fit(education~.,data=rmath[ho$tr,],model=model[i],search=search,fdebug=TRUE)
model[2]
summary(rmath[ho$tr,])
class(rmath$education)
class(rmath$age)
search
M=fit(education~.,data=rmath[ho$tr,],model=model[i])
?read.table
math=read.table("bank_additional_cln.csv",sep=";",header=TRUE,stringsAsFactors=TRUE)
inputs=c(1,2,3,4,10)
education=which(names(math)=="education")
cat("output class:",class(math[,education]),"\n")
rmath=math[,c(inputs)] # for easy use
ho=holdout(rmath$education,2/3,seed=123) # 2/3 for training and 1/3 for testing
Y=rmath[ho$ts,ncol(rmath)]
for(i in 1:length(model))
{
cat("i:",i,"model:",model[i],"\n")
search=list(search=mparheuristic(model[i])) # rminer default values
M=fit(education~.,data=rmath[ho$tr,],model=model[i],search=search,fdebug=TRUE)
P=predict(M,rmath[ho$ts,])
cat("predicted MAE:",round(mmetric(Y,P,metriseac="MAE"),1),"\n")
}
for(i in 1:length(model))
{
cat("i:",i,"model:",model[i],"\n")
search=list(search=mparheuristic(model[i])) # rminer default values
M=fit(education~.,data=rmath[ho$tr,],model=model[i],search=search,fdebug=TRUE)
P=predict(M,rmath[ho$ts,])
cat("predicted MAE:",round(mmetric(Y,P,metric="MAE"),1),"\n")
}
source('~/blabla.R')
source('~/blabla.R')
x
y
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow()
library(tensorflow)
install_tensorflow()
install_tensorflow(method = 'conda', envname = 'r-reticulate')
library(ggplot2)
data(Marriage, package = "mosaicData")
# plot the distribution of race
ggplot(Marriage, aes(x = race)) +
geom_bar()
q()n
q()
(54.13+5.41)*3
1005*5
15*4
q()
x=runif(100,0,50)
x
x=runif(10000,0,50)
x
y=rnorm(10000,50,2)
y
boxplot(x,y)
library(ggplot2)
library(plotly)
p <- ggplot(mpg, aes(x=displ,
y=hwy,
color=class)) +
geom_point(size=3) +
labs(x = "Engine displacement",
y = "Highway Mileage",
color = "Car Class") +
theme_bw()
ggplotly(p)
library(ggplot2)
# stacked bar chart
ggplot(mpg,
aes(x = class,
fill = drv)) +
geom_bar(position = "stack")
q()
setwd("~/AULAS/EGI/session4-opt1/Roptim1")
list.files()
source("demo-1-grid.R")
source("blind.R") # fsearch is defined here
source("grid.R") #  gsearch is defined here
# dimension
D=2
# evaluation function:
sphere=function(x) sum(x^2)
lower=rep(-10.4,D) # lower bounds
upper=rep(10.4,D) #  upper bounds
D
lower
upper
sphere(c(0,0))
sphere(c(10,10))
sphere(c(10,10,10,10,10))
lower
GS
GS$sol
GS$eval
GS=gsearch(fn=sphere,lower=lower,upper=upper,step=c(2.1,2.1),type="max")
GS
GS=gsearch(fn=sphere,lower=lower,upper=upper,step=c(0.1,0.1),type="min")
GS
GS=gsearch(fn=sphere,lower=lower,upper=upper,step=c(0.2,0.4),type="min")
GS
GS=gsearch(fn=sphere,lower=lower,upper=upper,step=c(0.21,0.42),type="min")
GS
rep(5,0)
rep(0,5)
D=20
# evaluation function:
sphere=function(x) sum(x^2)
# hill climbing search
N=100 # 100 searches
REPORT=N/20 # report results
lower=rep(-10.4,D) # lower bounds
upper=rep(10.4,D) #  upper bounds
#set.seed(125)
# slight change of a real par under a normal u(0,0.5) function:
rchange1=function(par,lower,upper) # change for hclimbing
{ hchange(par,lower=lower,upper=upper,rnorm,mean=0,sd=0.5,round=FALSE) }
lower
upper
D
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
source("hill.R")
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rchange1(rep(0,2),lower=c(-10,-10),upper=c(10,10))
rep(0,2)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,0,0.001)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.001,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.1,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
hchange(rep(0,2),lower=c(-10,-10),upper=c(10,10),rnorm,mean=0,sd=0.5,round=FALSE)
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-4-sann.R")
source("demo-4-sann.R")
source("demo-4-sann.R")
source("demo-4-sann.R")
LIM=10.4 # upper and lower bound
Low=-LIM
Up=LIM
Low
Up
BITS=8
BITS
D=2
bin2real=function(x) # x is vector of bits
{ x=paste(x,collapse="") # x is now string
n=strtoi(x,base=2)
return (Low+(Up-Low)*n/(2^BITS-1))
}
bin2real(c(0,0,0,0,0,0,0,0))
bin2real(c(1,1,1,1,1,1,1,1))
bin2real(c(0,0,0,0,0,0,0,1))
K=D*LIM^2 # global variable
K
bsphere=function(x)
{ x1=x[1:BITS];x2=x[(BITS+1):length(x)]
xr=c(bin2real(x1),bin2real(x2))
return (K-sum(xr^2)) # tabuSeach maximizes
}
bsphere(c(1,1,1,1,1,1,1,1,1,1,1))
bsphere(c(0,0,0,0,0,0,0))
bsphere(c(0,0,0,0,0,0,0,0,0,0,0))
bsphere(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
K=10000000000
bsphere(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))
K=D*LIM^2 # global variable
source("demo-5-tabu.R")
bs
eval=function(x) -profit(x)
profit=function(x,cost_per_unit=c(10,15))
{
v=sales(x)
c=cost(v,cost_per_unit)
profit=sum(v*x-c)
return(profit)
}
cost=function(units,cpu)
{
c=100+cpu*units
return(c)
}
sales= function(x)
{
p=(1000/log(x+200)-140)
return(round(p,digits=0))
}
profit(c(30,40))
source("opt-sales-example.R")
sales(c(30,40))
cost(c(30,40))
cost(c(30,40),cpu=c(10,15))
profit(c(30,40))
Runs=10
cat("Simulated Annealing (example with",Runs,"different seeds/runs): \n")
x=sample(1:1000,Runs)
y=sample(1:1000,Runs)
x
y
i=1
sa= optim(c(x[i],y[i]),fn=eval,method="SANN",control=list(maxit=6000, temp=2000, trace=FALSE))
sa
source("opt-sales-example.R")
source("opt-sales-example.R")
setwd("~/AULAS/EGI/session4-opt1/Roptim1")
list.files()
source("demo-1-grid.R")
source("blind.R") # fsearch is defined here
source("grid.R") #  gsearch is defined here
# dimension
D=2
# evaluation function:
sphere=function(x) sum(x^2)
lower=rep(-10.4,D) # lower bounds
upper=rep(10.4,D) #  upper bounds
D
lower
upper
sphere(c(0,0))
sphere(c(10,10))
sphere(c(1,1))
sphere(c(-1,-3))
GS=gsearch(fn=sphere,lower=lower,upper=upper,step=c(2.1,2.1),type="min")
GS
GS=gsearch(fn=sphere,lower=lower,upper=upper,step=c(2.1,2.1),type="max")
GS
GS=gsearch(fn=sphere,lower=lower,upper=upper,step=c(1.05,0.75),type="min")
GS
GS=gsearch(fn=sphere,lower=lower,upper=upper,step=c(1.052,0.503),type="min")
GS
source("demo-1-grid.R")
GS
source("demo-2-hill.R")
s0=c(0,0)
s0
rchange1(s0)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
rchange1(s0,lower,upper)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.05,round=FALSE)
s0
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=0.5,round=FALSE)
hchange(s0,lower=lower,upper=upper,rnorm,mean=0,sd=1.0,round=FALSE)
source("demo-2-hill.R")
source("demo-2-hill.R")
source("demo-2-hill.R")
HC
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
source("demo-3-montecarlo.R")
optim
=optim
?optim
source("demo-4-sann.R")
SA
source("demo-4-sann.R")
source("demo-4-sann.R")
source("demo-4-sann.R")
BITS=8 # bits per parameter, sets the real value precision and affects the solution size
LIM=10.4 # upper and lower bound
Low=-LIM
Up=LIM
# return real value within [Low,Up] using the binary x (vector of 0 or 1):
bin2real=function(x) # x is vector of bits
{ x=paste(x,collapse="") # x is now string
n=strtoi(x,base=2)
return (Low+(Up-Low)*n/(2^BITS-1))
}
BITS
bin2real(c(0,0,0,0,0,0,0,0))
bin2real(c(1,1,1,1,1,1,1,1))
bin2real(c(1,0,0,0,0,0,0,0))
K=D*LIM^2
K
size=D*BITS # solution size is D*BITS
s=c(rep(0,BITS),rep(1,BITS))
s
s=tabuSearch(size,iters=N,objFunc=bsphere,config=s,verbose=TRUE)
size=D*BITS # solution size is D*BITS
s=c(rep(0,BITS),rep(1,BITS))
s=tabuSearch(size,iters=N,objFunc=bsphere,config=s,verbose=TRUE)
size
D=2 # 2 parameters x1 and x2
BITS=8 # bits per parameter, sets the real value precision and affects the solution size
LIM=10.4 # upper and lower bound
Low=-LIM
Up=LIM
# return real value within [Low,Up] using the binary x (vector of 0 or 1):
bin2real=function(x) # x is vector of bits
{ x=paste(x,collapse="") # x is now string
n=strtoi(x,base=2)
return (Low+(Up-Low)*n/(2^BITS-1))
}
# evaluation function:
K=D*LIM^2 # global variable
#K=10000000000
# note1: tabuSearch maximizes the evaluation function, thus we maximize K - the function, which is equivalent
#  to minimize the function.
# note2: tabuSearch only works with non negative evaluation function values, thus K was computed as the maximum possible value.
bsphere=function(x)
{ x1=x[1:BITS];x2=x[(BITS+1):length(x)]
xr=c(bin2real(x1),bin2real(x2))
return (K-sum(xr^2)) # tabuSeach maximizes
}
N=100 # number of iterations
size=D*BITS # solution size is D*BITS
s=c(rep(0,BITS),rep(1,BITS))
s=tabuSearch(size,iters=N,objFunc=bsphere,config=s,verbose=TRUE)
size
s
bs
bin2real(bs[1:BITS])
bin2real(bs[(BITS+1):length(bs)])
cat("best solution:",bin2real(bs[1:BITS]),bin2real(bs[(BITS+1):length(bs)]),"evaluation function",K-s$eUtilityKeep[b],"\n")
eval=function(x) -profit(x)
profit=function(x,cost_per_unit=c(10,15))
{
v=sales(x)
c=cost(v,cost_per_unit)
profit=sum(v*x-c)
return(profit)
}
cost=function(units,cpu)
{
c=100+cpu*units
return(c)
}
sales= function(x)
{
p=(1000/log(x+200)-140)
return(round(p,digits=0))
}
cost(c(150,250))
cost(c(150,250),cpu=c(10,15))
sales(c(150,250))
cosrt(c(31,24))
cosrt(c(31,24),cpu=c(10,15))
cost(c(31,24),cpu=c(10,15))
profit(c(150,250))
source("opt-sales-example.R")
x=sample(1:1000,Runs)
y=sample(1:1000,Runs)
x
y
source("opt-sales-example.R")
q()
